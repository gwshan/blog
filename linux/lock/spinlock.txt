
============
Source Files
============

arch/arm64/include/asm/spinlock.h            # Prefer qspinlock
include/asm-generic/spinlock_types.h         # Native spinlock
include/asm-generic/spinlock.h
include/asm-generic/qspinlock_types.h        # qspinlock
include/asm-generic/qspinlock.h
include/linux/spinlock_types_raw.h           # raw_spinlock
include/linux/spinlock_types.h               # spinlock
include/linux/spinlock_api_up.h              # Uni-Processor     
include/linux/spinlock_api_smp.h
include/linux/spinlock.h
kernel/locking/qspinlock.c

=============
Configuration
=============

CONFIG_ARCH_USE_QUEUED_SPINLOCKS
CONFIG_QUEUED_SPINLOCKS
CONFIG_DEBUG_SPINLOCK
CONFIG_DEBUG_LOCK_ALLOC

===========
Data Struct
===========

typedef atomic_t arch_spinlock_t;		# Native spinlock

typedef struct qspinlock {			# qspinlock
	union {
		atomic_t val;

		struct {
			u8      locked;
			u8      pending;
		};
		struct {
			u16     locked_pending;
			u16     tail;
		};
	};
} arch_spinlock_t;

typedef struct raw_spinlock {
	arch_spinlock_t raw_lock;
#ifdef CONFIG_DEBUG_SPINLOCK
	unsigned int magic, owner_cpu;
	void *owner;
#endif
#ifdef CONFIG_DEBUG_LOCK_ALLOC
	struct lockdep_map dep_map;
#endif
} raw_spinlock_t;

typedef struct spinlock {
	union {
		struct raw_spinlock rlock;

#ifdef CONFIG_DEBUG_LOCK_ALLOC
# define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map))
		struct {
			u8 __padding[LOCK_PADSIZE];
			struct lockdep_map dep_map;
		};
#endif
	};
} spinlock_t;

======
Design
======


====
APIs
====




